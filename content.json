{"meta":{"title":"youyou","subtitle":"youyou--blog","description":"","author":"youyou","url":"https://youyou-an.github.io","root":"/"},"pages":[{"title":"","date":"2024-08-13T16:15:35.499Z","updated":"2024-08-13T16:15:35.499Z","comments":false,"path":"categories/index.html","permalink":"https://youyou-an.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2024-08-13T16:15:12.638Z","updated":"2024-08-13T16:15:12.638Z","comments":false,"path":"tags/index.html","permalink":"https://youyou-an.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"视频基础知识","slug":"视频基础知识","date":"2024-08-25T02:57:25.818Z","updated":"2024-08-25T10:06:37.435Z","comments":true,"path":"2024/08/25/视频基础知识/","link":"","permalink":"https://youyou-an.github.io/2024/08/25/%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"","text":"扫描方式屏幕由很多行组成，把一排的像素称为行，扫描的时候由“行”为单位来进行扫描 逐行扫描：一行接着一行往下扫描，直到扫描一副完整的屏幕。 用p（Progressive）表示。 隔行扫描：不是一行接一行往下扫描，而是隔着一行接着一行往下扫描。 用i（Interlaced）表示。目的是为了在数据传输压力比较大的时候，能够有效降低数据量，提高播放效率 场：从屏幕上方到下方扫一轮所得到的画面称为场，一轮扫描的结果称为一个场。所以隔行扫描需要两个场才能得到完整的画面，而逐行扫描只需要一个场就能够得到完整的画面。因此25p和50i最终形成的画面是同一个画面。 奇数场：只扫描1、3、5……奇数行所得到的场（上场优先） 偶数场：只扫描2、4、6……偶数行所得到的场（下场优先） 完整场： 帧速率fps(Frames Per Second)：每秒钟呈现的画面的多少称为帧速率，比如一秒呈现25个画面，那么其fps为25帧&#x2F;秒 PAL制：使用电压频率50hz的国家，一般扫描场就是50场，如果采用了隔行扫描，则为25帧 NTSC制：使用电压频率60hz的国家，一般扫描场就是60场，如果采用了隔行扫描，则为30帧 Film：24fps 分辨率(清晰度)表达屏幕像素的方法是 宽x高，宽有多少像素，高有多少像素，比如720x576、1280x720、1920x1080 屏幕另一个重要的指标是宽高比，即宽度和高度的比例，如：4:3、16:9 常见的分辨率： 标清：720x576 720x480 高清：960x540 超清：1280x720 1080p（高清hd）：1920x1080 2k：2048x1080 4k：4096x2160 5k：5120x2700 8k：8192x4320 数字影像信息标准的写法：纵坐标像素+扫描场数+扫描方式 编码完整的色彩信息(RGB)造成数据量的巨大，为存储和读取制造了很大的麻烦。 于是需要一种方法将色彩信息和数据进行压缩，但需要保留高清晰度和质感。 思路：人对明亮的变化程度敏感于色彩的变化程度，于是把一个画面分为亮度和色度（即YUV色彩模式，Y代表亮度，是RGB三色的加权和，U和V表示色度，是亮度减去蓝、红） 采样：对于一个画面需要保留哪些部分，需要丢弃哪些部分的一种策略 4：4：4 4：2：2 4：2：0 如果以4个像素为一组进行采样，则第一个4代表保留了所有的亮度信息，第二个4代表当前一行保留了所有的色度信息，第三个4表示下一行保留了所有的色度信息，如果是2，则表示下一行保留2个像素的色度信息。 视频编码：对数字视频进行压缩或者解压缩的程序。也可以通过特定的压缩技术，将某个视频格式转换为另一种视频格式。 H.264：是一种视频压缩标准，广泛用于高精度视频的录制、压缩和发布格式。解编码器复杂性非常高，从而导致多视频流和效果的实时视频编辑性能降低。 H.265：相较于H.264，可以将视频压缩更小，即数据量更小，而且能够保证清晰度，但是目前并没有普及 MPEG：MPEG-4 Part 10 和H.264一样，只是不同的厂家取了不同的名字 ProRES：苹果公司开发，可以提供非常高的图像质量并且能够降低复杂度，在播放的时候能够实时的得到更高的效率，这种编码方式包含阿尔法通道，能够有利于特效制作。（阿尔法通道在原有的RGB通道上再加8位用来表示该图像的透明程度，0代表黑色透明，255代表白色不透明；也可以将0255映射为01，此时可以用来对多张图像进行加权叠加进而重新计算叠加后图像的三通道值） DNxHR 视频封装格式（视频格式）：相当于储存视频信息的容器，是由相应的公司开发出来的，可以包含音频的编码，可以包含视频的编码，也可以包含字幕的编码。 AVI：由微软公司推出，图像质量好，无损的AVI可以保存阿尔法通道，体积大，压缩标准不统一，因此对于不同的avi视频，有可能因为没有对应的解码方式导致视频无法播放。 MPEG：扩展名非常多（MPG MPEG MPE DAT VOB ASF MP4）,运动图像压缩算法的国际标准 WMV：文件特别小 码流：每秒数据大小，单位是Mb&#x2F;s，即兆比特每秒，码流越大，数据量越大，清晰度越高","categories":[],"tags":[]},{"title":"Node的简介和安装","slug":"Node简介和安装","date":"2024-08-13T16:00:00.000Z","updated":"2024-08-14T17:38:01.766Z","comments":true,"path":"2024/08/14/Node简介和安装/","link":"","permalink":"https://youyou-an.github.io/2024/08/14/Node%E7%AE%80%E4%BB%8B%E5%92%8C%E5%AE%89%E8%A3%85/","excerpt":"","text":"Node简介Node.js（通常简称为“Node”）是一个开源的、跨平台的 JavaScript 运行环境。它允许开发者在服务器端（即后端）使用 JavaScript 编写应用程序，而不仅仅是在浏览器（即前端）中使用 JavaScript。Node通常运用于Web开发中。 Node安装 Node有windows，linux，mac三种版本，具体采用哪种版本看自己的需求，本篇文章在windows环境下安装Node。 在安装之前，如果你曾经安装过Node，想重新安装新版本的，则需要先删除之前下载过的Node。如果是第一次安装可以跳过该步骤。 卸载方法：在控制面版中找到卸载程序 找到Node.js并卸载 删除 C:\\Users\\用户名\\AppData\\Roaming 下的npm; 开始安装Node.js 首先进入Node官网： https://nodejs.org/en/download/prebuilt-installer 选取自己所需要的版本和自己对应的架构，强烈建议不要选择高版本的Node，因为可能会有莫名其妙的bug出现，我采用的版本是12.22.12。 在这里我采用安装包的方式进行安装。 查看自己架构的方法：打开cmd，输入： wmic os get osarchitecture 并按下回车 64-bit是x64；32-bit是x86 开始安装 同意许可,然后next 自行修改安装目录，然后next 不需要修改，next 最后选择install即可，出现以下界面则显示安装完成 验证是否安装成功 打开cmd分别输入: node -v npm -v 如果如下图所示则说明安装成功：","categories":[],"tags":[]}],"categories":[],"tags":[]}